; -------------------------------------------------------------------------
; -------------------------------------------------------------------------
[debug_esp8266_base]
extends = common

lib_deps =
    ESP8266WiFi
    asyncHTTPrequest

src_filter =
    ${env.src_filter}
    -<../src/plugins/>
    -<../lib/KFCPinMonitor/>
    +<../src/plugins/file_manager/>
    +<../src/plugins/ntp/>
    +<../src/plugins/mdns/>
    +<../src/plugins/syslog/>
    +<../src/plugins/mqtt/>
    +<../src/plugins/http2serial/>
    +<../src/plugins/ssdp/>
    +<../src/plugins/sensor/>
    +<../src/generated/>

build_flags = ${common.build_flags}
    -ggdb -Og
    ; --- assets debugging/development
    ; most assets can be modified without updating the file system image
    ; for debugging assets, enable DEBUG_ASSETS, upload the file system image and start the web server
    ; python.exe .\scripts\debug_assets\http.server.py
    -D DEBUG_ASSETS=0
    -D DEBUG_ASSETS_URL1=\"http://192.168.0.61:8000\"
    -D DEBUG_ASSETS_URL2=\"http://192.168.0.61:8001\"
    ; --- general debugging
    -D DEBUG=1
    -D DEBUG_INCLUDE_SOURCE_INFO=1
    -D DEBUG_UNINITIALIZEDCLASSES=0
    ; --- protection amd debugging https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
    -fstack-protector
    ; -fstack-check
    ; -Os
    ; -fsanitize=bounds-strict
    ; -fsanitize=bounds
    ; -fsanitize=alignment
    ; -fsanitize=bool
    ; -fsanitize=enum
    ; -fsanitize=nonnull-attribute
    ; -fsanitize=object-size
    ; -finstrument-functions
    ; -D HAVE_INSTRUMENT_FUNCTIONS=1
    ; -D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48=1
    ; --- minimal MEM DEBUG
    ; -D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48=1
    ; -D UMM_DBG_LOG_LEVEL=2
    ; -D UMM_INLINE_METRICS=1
    ; --- MEM DEBUG, needs ~2500byte extra IRAM
    ; -D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48=1
    ; -D DEBUG_ESP_PORT=Serial
    ; -D DEBUG_ESP_OOM=1
    ; -D UMM_POISON_CHECK=1
    ; -D UMM_POISON=1
    ; -D UMM_INTEGRITY_CHECK=1
    ; -D UMM_CRITICAL_METRICS=1
    ; -D UMM_STATS_FULL=1
    ; -D UMM_INLINE_METRICS=1
    ; -D UMM_DBG_LOG_LEVEL=2
    ; ---

# increase LittleFS/SPIFFS to a maximum if writing frequently, otherwise the flash might wear out early while the unused part is fully intact

# allows OTA with up to ~1028KB
board_build.ldscript = ./conf/ld/eagle.flash.4m2m.ld

# allows OTA with up to ~2052KB
#board_build.ldscript = ./conf/ld/eagle.flash.4m1m.ld


; -------------------------------------------------------------------------
; debug esp8266 no GDBStub
; -------------------------------------------------------------------------

[debug_esp8266]
extends = debug_esp8266_base

lib_ignore = GDBStub
    ${debug_esp8266_base.lib_ignore}

build_flags = ${debug_esp8266_base.build_flags}
    -D HAVE_GDBSTUB=0

; -------------------------------------------------------------------------
; debug esp8266 extra
; increased IRAM for debugging, can be used with GDBStub
; -------------------------------------------------------------------------
[debug_esp8266_extra]

build_flags = -D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48
    -D DEBUG_ESP_PORT=Serial
    ; -D DEBUG_ESP_CORE
    ; -D DEBUG_ESP_WIFI
    -D DEBUG_ESP_OOM
    -D UMM_INTEGRITY_CHECK
    -D UMM_POISON_CHECK

; build_flags =
    ; -D DEBUG_ESP_PORT=Serial
    ; -D DEBUG_ESP_CORE
    ; -D DEBUG_ESP_WIFI
    ; -D DEBUG_ESP_OOM
    ; -D DEBUG_ESP_SSL
    ; -D DEBUG_ESP_TLS_MEM
    ; -D DEBUG_ESP_HTTP_CLIENT
    ; -D DEBUG_ESP_HTTP_SERVER
    ; -D DEBUG_ESP_HTTP_UPDATE
    ; -D DEBUG_ESP_UPDATER
    ; -D DEBUG_ESP_OTA
    ; -D DEBUG_ESP_OOM -include "umm_malloc/umm_malloc_cfg.h"

; -------------------------------------------------------------------------
; debug esp8266 GDBSTUB
; -------------------------------------------------------------------------

[debug_esp8266_gdbstub]
extends = debug_esp8266_base

build_flags = ${debug_esp8266_base.build_flags}
    -D GDBSTUB_FREERTOS=0
    -D GDBSTUB_USE_OWN_STACK=0
    -D GDBSTUB_CTRLC_BREAK=1
    -D GDBSTUB_REDIRECT_CONSOLE_OUTPUT=1
    -D GDBSTUB_BREAK_ON_INIT=0
    -D GDBSTUB_BREAK_ON_EXCEPTION=1
    -D HAVE_GDBSTUB=1
    ; -D DEBUG_ESP_PORT=Serial
    ; -D DEBUG_ESP_CORE

; -------------------------------------------------------------------------
; esp32 shared debug env
; -------------------------------------------------------------------------

[debug_esp32]
extends = common

lib_deps =
    AsyncTCP
    HTTPClient
    WiFiClientSecure
    ${common.lib_deps}

build_flags =
    ${common.build_flags}
    -D ESP32=1
    -Wl,--wrap=settimeofday
