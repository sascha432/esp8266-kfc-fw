<?php

namespace Json2php;

use Nette\PhpGenerator\Constant;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;
use Nette\PhpGenerator\ClassType;
use Screw\Str;

class GeneratorESPWebFramework
{
    use GeneratorTrait;

    /**
     * @param ClassType $class
     * @param $property
     * @param $type
     * @param array $flags
     * @return ClassType
     */
    public static function getMethod(ClassType $class, $property, $type, array &$options): ClassType
    {
        if (!empty($options['override_type'])) {
            $type = $options['override_type'];
        }
        /** @noinspection NestedTernaryOperatorInspection */
        $type = $type === 'integer' ? 'int' : ($type === 'boolean' ? 'bool' : $type);

        $lower = Str::toLowerCamelCase($property);
        $upper = Str::toUpperCamelCase($property);
        $getter = 'get'.$upper;

        $value = null;
        $null = '|null';
        $returnType = false;
        $isArray = strpos($type, '[') !== false;
        $namespace = $class->getNamespace()->getName();
        if (!in_array(rtrim($type, '[]'), self::$keywords, true) && $type[0] !== '\\') {
            $type = "\\$namespace\\$type";
        }

        if ($isArray) {
            $type .= '|array';
            $returnType = 'array';
            $value = array();
            $null = '';
        }

        if (!empty($options['nullable']) && $options['nullable'] === 'false') {
            $null = '';
        }

        $property = $class->addProperty($lower)
            ->setVisibility('private')
            ->addComment("@var {$type}{$null}")
            ->setValue($value);

        if (!empty($options['validators'])) {
            foreach($options['validators'] as $validator) {
                $property->addComment('@validator '.$validator);
            }
        }

        if ($returnType === false) {
            $returnType = $type;
        }

        $class->addMethod($getter)
            ->addBody("return \$this->{$lower};")
            ->addComment("@return {$type}{$null}")
            ->setReturnNullable($null !== '')
            ->setReturnType($returnType);

        return $class;
    }


    public static function generator(string $json, $className = null, $namespace = null, $output = null, $path = array()): string
    {
        $optionsStr = false;
        if (strpos($className, ':') !== false) {
            list($className, $optionsStr) = explode(':', $className, 2);
        }

        $className = self::formatClassName($className);
        $output = $output ?: '.';
        $output = rtrim($output, '\\/').'/';
        $file = new PhpFile();
        $file->addComment('Code generated by json2php. DO NOT EDIT.');
        $file->addComment('Generator at ' . date('Y-m-d H:i:s', time()));
        if ($namespace) {
            $class = $file->addNamespace($namespace)->addClass($className);
        } else {
            $class = $file->addClass($className);
        }
        if ($optionsStr) {
            if (preg_match('/__extends\s*\(([^)]+)\)/i', $optionsStr, $matches)) {
                $class->setExtends($matches[1]);
            }
        }

        $obj = json_decode($json);
        if (count($path) === 0) {
            \ESPWebFramework\JsonReader::normalizeConfiguration($obj);
        }

        $constants = array();
        foreach ($obj as $property => $value) {

            if ($property === '__comment') {
                continue;
            }

            $options = array();
            $_property = $property;
            if (strpos($property, ':') !== false) {
                list($property, $optionsStr) = explode(':', $property, 2);
                if (preg_match('/__nullable\s*\(([^)]+)\)/i', $optionsStr, $matches)) {
                    $options['nullable'] = $matches[1];
                }
            }

            if (is_string($value)) {
                if (preg_match('/__nullable\s*\(([^)]+)\)/i', $value, $matches)) {
                    $options['nullable'] = $matches[1];
                }
                if (preg_match('/__validator\s*\(([^)]+)\)/i', $value, $matches)) {
                    $options['validators'] = explode(',', $matches[1]);
                }
                if (preg_match('/__class\s*\(([^)]+)\)/i', $value, $matches)) {
                    $options['override_type'] = $matches[1];
                }
                if (preg_match('/__enum\s*\(([^)]+)\)/i', $value, $matches)) {
                    $options['override_type'] = 'Type\\Enum';
                    $count = 0;
                    foreach(explode(',', $matches[1]) as $name) {
                        $name = strtok($name, '=');
                        if (($value = strtok('')) !== false) {
                            $count = (int)$value;
                        }
                        $constants[] = $const = new Constant(strtoupper($property.'_'.trim($name)));
                        $const
                            ->setVisibility(ClassType::VISIBILITY_PUBLIC)
                            ->setValue($count++);
                    }
                }
            }

            $type = gettype($value);
            if (is_object($value)) {
                $path[] = $property;
                $type = self::generator(json_encode($value), $_property, $namespace, $output, $path);
                array_pop($path);
            } else if (is_array($value)) {
                $obj2 = array();
                foreach ($value as $k => $v) {
                    if (is_object($v)) {
                        /** @noinspection SlowArrayOperationsInLoopInspection */
                        $obj2 = array_replace_recursive($obj2, (array)$v);
                    } else {
                        $type = gettype($v) . '[]';
                        break;
                    }
                }
                if (count($obj2)) {
                    $path[] = $property;
                    $type = self::generator(json_encode((object)$obj2), $_property, $namespace, $output, $path).'[]';
                    array_pop($path);
                }
            } else if (!is_numeric($property)) {
                $type = gettype($value);
            } else {
                continue;
            }
            self::getMethod($class, $property, $type, $options);
        }
        $class->setConstants($constants);
        self::createFile($output . $className . '.php', (new PsrPrinter())->printFile($file));

        return $className;
    }
}
