<?php

namespace Json2php;

use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;
use Screw\Str;

class GeneratorYiiModel
{
    use GeneratorTrait;

    public static function generator(string $json, $className = null, $namespace = null, $output = null): string
    {
        $className = self::formatClassName($className);
        $output = $output ?: dirname('./');
        $file = new PhpFile();
        $file->addComment('Code generated by json2php. DO NOT EDIT.');
        $file->addComment('Generator at ' . date('Y-m-d H:i:s', time()));
        if ($namespace) {
            $class = $file->addNamespace($namespace)->addClass($className);
        } else {
            $class = $file->addClass($className);
        }
        $class->addExtend('\yii\base\Model');

        $obj = json_decode($json);

        $attrs = [];
        foreach ($obj as $property => $value) {
            $type = gettype($value);
            if (is_object($value)) {
                $type = self::generator(json_encode($value), $property, $namespace, $output);
            }
            if (is_array($value)) {
                foreach ($value as $k => $v) {
                    if (is_object($v)) {
                        $type = self::generator(json_encode($value), $property, $namespace, $output);
                    } else {
                        $type = gettype($v) . '[]';
                    }
                    break;
                }
            }
            self::getOrSetMethod($class, $property, $type);
            $attrs[Str::toLowerCamelCase($property)] = $type;
        }

        // generator yii2 model rules
        self::addRulesMethod($class, $attrs);
        // generator attribute labels method
        self::addAttributeLabelsMethod($class, $attrs);
        // generator file
        self::createFile($output . $className . '.php', (new PsrPrinter())->printFile($file));

        return $className;
    }

    private static function addRulesMethod(ClassType $class, array $attrs): ClassType
    {
        // generator yii2 model rules
        $newAttrs = [];
        foreach ($attrs as $attr => $aType) {
            $newAttrs[$aType][] = $attr;
        }
        $innerType = ['string', 'integer'];
        $rules = [];
        foreach ($newAttrs as $k => $v) {
            // if type is object, continue
            if (!in_array($k, $innerType, true)) {
                continue;
            }
            $v = array_map(function($kv) {
                return "'{$kv}'";
            }, $v);
            $s = rtrim(implode(', ', $v), ', ');
            $rules[] = "[[$s], '{$k}']";
        }
        $ruleString = implode(",\n\t", $rules);
        $ruleReturn = "return [\n\t{$ruleString}\n];";
        $class->addMethod('rules')->setVisibility('public')->setBody($ruleReturn);

        return $class;
    }

    private static function addAttributeLabelsMethod(ClassType $class, array $attrs): ClassType
    {
        $labels = [];
        foreach (array_keys($attrs) as $k) {
            $chinese = str_replace('_', ' ', Str::toSnakeCase($k));
            $labels[] = "'{$k}' => '{$chinese}'";
        }
        $labelString = implode(",\n\t", $labels);
        $labelReturn = "return [\n\t{$labelString}\n];";
        $class->addMethod('attributeLabels')->setVisibility('public')->setBody($labelReturn);

        return $class;
    }
}