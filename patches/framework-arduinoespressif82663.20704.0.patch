diff -r -Z -P4 ./framework-arduinoespressif8266_orig/cores/esp8266/FS.h ./framework-arduinoespressif8266/cores/esp8266/FS.h
269c269
< extern fs::FS SPIFFS __attribute__((deprecated("SPIFFS has been deprecated. Please consider moving to LittleFS or other filesystems.")));
---
> extern fs::FS SPIFFS; // __attribute__((deprecated("SPIFFS has been deprecated. Please consider moving to LittleFS or other filesystems.")));
diff -r -Z -P4 ./framework-arduinoespressif8266_orig/cores/esp8266/HardwareSerial.h ./framework-arduinoespressif8266/cores/esp8266/HardwareSerial.h
206a207,209
> #ifdef HAVE_KFC_FIRMWARE_VERSION
> extern Stream &Serial;
> #else
207a211
> #endif
diff -r -Z -P4 ./framework-arduinoespressif8266_orig/cores/esp8266/WString.cpp ./framework-arduinoespressif8266/cores/esp8266/WString.cpp
662,697d661
< int String::lastIndexOf(char theChar) const {
<     return lastIndexOf(theChar, len() - 1);
< }
< 
< int String::lastIndexOf(char ch, unsigned int fromIndex) const {
<     if (fromIndex >= len())
<         return -1;
<     char tempchar = buffer()[fromIndex + 1];
<     wbuffer()[fromIndex + 1] = '\0';
<     char* temp = strrchr(wbuffer(), ch);
<     wbuffer()[fromIndex + 1] = tempchar;
<     if (temp == NULL)
<         return -1;
<     return temp - buffer();
< }
< 
< int String::lastIndexOf(const String &s2) const {
<     return lastIndexOf(s2, len() - s2.len());
< }
< 
< int String::lastIndexOf(const String &s2, unsigned int fromIndex) const {
<     if (s2.len() == 0 || len() == 0 || s2.len() > len())
<         return -1;
<     if (fromIndex >= len())
<         fromIndex = len() - 1;
<     int found = -1;
<     for (char *p = wbuffer(); p <= wbuffer() + fromIndex; p++) {
<         p = strstr(p, s2.buffer());
<         if (!p)
<             break;
<         if ((unsigned int) (p - wbuffer()) <= fromIndex)
<             found = p - buffer();
<     }
<     return found;
< }
< 
719a684,698
> bool String::insert(size_t pos, const char *insert, size_t insertLen) {
>     if (pos >= length()) {
>         return false;
>     }
>     auto requiredLen = length() + insertLen;
>     if (!reserve(requiredLen)) {
>         return false;
>     }
>     setLen(requiredLen);
>     memmove(wbuffer() + pos + insertLen, wbuffer() + pos, length() - pos + 1);
>     memmove_P(wbuffer() + pos, insert, insertLen);
>     return true;
> }
> 
> 
799c778
< void String::toLowerCase(void) {
---
> String &String::toLowerCase(void) {
801c780
<         return;
---
>         return *this;
804a784
>     return *this;
807c787
< void String::toUpperCase(void) {
---
> String &String::toUpperCase(void) {
809c789
<         return;
---
>         return *this;
812a793
>     return *this;
815c796,797
< void String::trim(void) {
---
> 
> String &String::trim(void) {
817c799
<         return;
---
>         return *this;
828a811
>     return *this;
829a813
> 
diff -r -Z -P4 ./framework-arduinoespressif8266_orig/cores/esp8266/WString.h ./framework-arduinoespressif8266/cores/esp8266/WString.h
30a31
> 
40a42,45
> #ifdef HAVE_KFC_FIRMWARE_VERSION
> #include "KFCBaseLibrary/include/misc_string.h"
> #endif
> 
186a192,196
> #ifdef HAVE_KFC_FIRMWARE_VERSION
>         unsigned char equals(const __FlashStringHelper *fstr) const {
>             return String_equals(*this, fstr);
>         }
> #endif
192a203,207
> #ifdef HAVE_KFC_FIRMWARE_VERSION
>         unsigned char operator ==(const __FlashStringHelper *fstr) const {
>             return String_equals(*this, fstr);
>         }
> #endif
198a214,218
> #ifdef HAVE_KFC_FIRMWARE_VERSION
>         unsigned char operator !=(const __FlashStringHelper *fstr) const {
>             return !String_equals(*this, fstr);
>         }
> #endif
203a224,232
> #ifdef HAVE_KFC_FIRMWARE_VERSION
>         unsigned char equalsIgnoreCase(const char *cstr) const {
>             return String_equalsIgnoreCase(*this, cstr);
>         }
>         unsigned char equalsIgnoreCase(const __FlashStringHelper *fstr) const {
>             return String_equalsIgnoreCase(*this, fstr);
>         }
> #endif
> 
205a235,242
> #ifdef HAVE_KFC_FIRMWARE_VERSION
>         unsigned char startsWith(const __FlashStringHelper *prefix) const {
>             return String_startsWith(*this, prefix);
>         }
>         unsigned char startsWith(const char * prefix) const {
>             return String_startsWith(*this, prefix);
>         }
> #else
211a249
> #endif
213a252,259
> #ifdef HAVE_KFC_FIRMWARE_VERSION
>         unsigned char endsWith(const char * suffix) const {
>             return String_endsWith(*this, suffix);
>         }
>         unsigned char endsWith(const __FlashStringHelper * suffix) const {
>             return String_endsWith(*this, suffix);
>         }
> #else
219a266
> #endif
241,244c288,307
<         int lastIndexOf(char ch) const;
<         int lastIndexOf(char ch, unsigned int fromIndex) const;
<         int lastIndexOf(const String &str) const;
<         int lastIndexOf(const String &str, unsigned int fromIndex) const;
---
> 
>         int indexOf(const char *str, unsigned int fromIndex = 0) const {
>             return String_indexOf(*this, reinterpret_cast<const __FlashStringHelper *>(str), fromIndex);
>         }
>         int indexOf(const __FlashStringHelper *fstr, unsigned int fromIndex = 0) const {
>             return String_indexOf(*this, fstr, fromIndex);
>         }
>         int lastIndexOf(char ch) const {
>             return String_lastIndexOf(*this, ch);
>         }
>         int lastIndexOf(char ch, unsigned int fromIndex) const {
>             return String_lastIndexOf(*this, ch, fromIndex);
>         }
>         int lastIndexOf(const String &str) const {
>             return String_lastIndexOf(*this, str.c_str(), length() - str.length(), str.length());
>         }
>         int lastIndexOf(const String &str, unsigned int fromIndex) const {
>             return String_lastIndexOf(*this, str.c_str(), fromIndex, str.length());
>         }
> 
248d310
<         ;
250a313,323
>         bool insert(size_t pos, const char *insert, size_t insertLen);
>         inline bool insert(size_t pos, const char *str) {
>             return insert(pos, str, strlen_P(str));
>         }
>         inline bool insert(size_t pos, const __FlashStringHelper *fstr) {
>             return insert(pos, reinterpret_cast<PGM_P>(fstr), strlen_P(reinterpret_cast<PGM_P>(fstr)));
>         }
>         inline bool insert(size_t pos, const String &str) {
>             return insert(pos, str.c_str(), str.length());
>         }
> 
271,273c344,390
<         void toLowerCase(void);
<         void toUpperCase(void);
<         void trim(void);
---
>         String &toLowerCase(void);
>         String &toUpperCase(void);
>         String &trim(void);
>         String &rtrim() {
>             String_rtrim(*this);
>             return *this;
>         }
>         String &ltrim() {
>             String_rtrim(*this);
>             return *this;
>         }
>         String &trim(const char *characters) {
>             String_trim(*this, characters);
>             return *this;
>         }
>         String &trim(const String &characters) {
>             String_trim(*this, characters.c_str());
>             return *this;
>         }
>         String &rtrim(const char *characters) {
>             String_rtrim(*this, characters);
>             return *this;
>         }
>         String &rtrim(const String &characters) {
>             String_rtrim(*this, characters.c_str());
>             return *this;
>         }
>         String &ltrim(const char *characters) {
>             String_ltrim(*this, characters);
>             return *this;
>         }
>         String &ltrim(const String &characters) {
>             String_ltrim(*this, characters.c_str());
>             return *this;
>         }
>         String &trim(const __FlashStringHelper *fchars) {
>             String_trim(*this, fchars);
>             return *this;
>         }
>         String &rtrim(const __FlashStringHelper *fchars) {
>             String_rtrim(*this, fchars);
>             return *this;
>         }
>         String &ltrim(const __FlashStringHelper *fchars) {
>             String_ltrim(*this, fchars);
>             return *this;
>         }
278c395
< 	double toDouble(void) const;
---
> 	    double toDouble(void) const;
358a476,480
> 
> #ifdef HAVE_KFC_FIRMWARE_VERSION
> #include "KFCBaseLibrary/include/misc_string_inline.h"
> #endif
> 
diff -r -Z -P4 ./framework-arduinoespressif8266_orig/libraries/ESP8266mDNS/src/LEAmDNS.h ./framework-arduinoespressif8266/libraries/ESP8266mDNS/src/LEAmDNS.h
523a524,526
> #ifdef HAVE_KFC_FIRMWARE_VERSION
>     public:
> #endif
1440a1444,1446
> #ifdef HAVE_KFC_FIRMWARE_VERSION
>     public:
> #endif
